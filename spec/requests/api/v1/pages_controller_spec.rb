require 'rails_helper'
require 'characters_code_engine.rb'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "api/v1/pages", type: :request do
  
  page = Page.where(url: "http://www.sgoogleaasss.com").first
  if page == nil
    page = Page.create(:url => "http://www.sgoogleaasss.com", :shortenUrl => CharactersCodeEngine.encode((Page.count > 0 ? Page.last.id : 0) + 1))
    page.save
  end  
  
  context 'GET #' do
    it 'should success' do
      
      get "/api/v1/pages/#{page.shortenUrl}"
      # binding.pry
      expect(response).to have_http_status(200)
      expect(response.body).to eq('http://www.sgoogleaasss.com')
    end

    it 'should not success' do

      get "/api/v1/pages/xcccvvvbbb"
      expect(response).to have_http_status(404)
      json = JSON.parse(response.body)
      expect(json["message"]).to start_with("Couldn't find Page with")
    end
  end


  context 'POST #create' do
    it 'should generate a shorten urls' do
      
      params = {
       url: 'http://www.googlexxxxxy.com'
      }
      expect { post('/api/v1/pages/', params: { page: params }) }.to change(Page, :count).by(1)
     end

    it 'should use a previously stored shorten url' do
      
      expect { post('/api/v1/pages/', params: { page: page.url }) }.to change(Page, :count).by(0)
    end
  end
end
